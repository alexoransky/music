import unittest
from theory.scales import PentatonicScale, HexatonicScale, HeptatonicScale

# see the following website for test reference:
# https://www.basicmusictheory.com/f-sharp-harmonic-minor-scale


class TestHeptatonicScale(unittest.TestCase):
    def test_C(self):
        scale = HeptatonicScale("C")
        self.assertEqual(scale.name(), "C major")
        self.assertEqual(scale.mode_name(), "ionian")
        self.assertEqual(scale.note_names(), "C D E F G A B")

    def test_B_major(self):
        scale = HeptatonicScale("B", "major")
        self.assertEqual(scale.name(), "B major")
        self.assertEqual(scale.mode_name(), "ionian")
        self.assertEqual(scale.note_names(), "B C‚ôØ D‚ôØ E F‚ôØ G‚ôØ A‚ôØ")

    def test_C_minor(self):
        scale = HeptatonicScale("C", "minor")
        self.assertEqual(scale.name(), "C minor")
        self.assertEqual(scale.mode_name(), "aeolian")
        self.assertEqual(scale.note_names(), "C D E‚ô≠ F G A‚ô≠ B‚ô≠")

    def test_C_natural_minor(self):
        scale = HeptatonicScale("C", "natural minor")
        self.assertEqual(scale.name(), "C minor")
        self.assertEqual(scale.mode_name(), "aeolian")
        self.assertEqual(scale.note_names(), "C D E‚ô≠ F G A‚ô≠ B‚ô≠")

    def test_E_natural_minor(self):
        scale = HeptatonicScale("E", "natural minor")
        self.assertEqual(scale.name(), "E minor")
        self.assertEqual(scale.mode_name(), "aeolian")
        self.assertEqual(scale.note_names(), "E F‚ôØ G A B C D")

    def test_E_harmonic_minor(self):
        scale = HeptatonicScale("E", "harmonic minor")
        self.assertEqual(scale.name(), "E harmonic minor")
        self.assertEqual(scale.mode_name(), "harmonic minor")
        self.assertEqual(scale.note_names(), "E F‚ôØ G A B C D‚ôØ")

    def test_E_melodic_minor(self):
        scale = HeptatonicScale("E", "melodic minor")
        self.assertEqual(scale.name(), "E melodic minor")
        self.assertEqual(scale.mode_name(), "melodic minor")
        self.assertEqual(scale.note_names(), "E F‚ôØ G A B C‚ôØ D‚ôØ")

    def test_Cb_minor(self):
        scale = HeptatonicScale("Cb", "minor")
        self.assertEqual(scale.name(), "C‚ô≠ minor")
        self.assertEqual(scale.mode_name(), "aeolian")
        self.assertEqual(scale.note_names(), "C‚ô≠ D‚ô≠ EùÑ´ F‚ô≠ G‚ô≠ AùÑ´ BùÑ´")

    def test_Ab_aeolian(self):
        scale = HeptatonicScale("Ab", "aeolian")
        self.assertEqual(scale.name(), "A‚ô≠ minor")
        self.assertEqual(scale.mode_name(), "aeolian")
        self.assertEqual(scale.note_names(), "A‚ô≠ B‚ô≠ C‚ô≠ D‚ô≠ E‚ô≠ F‚ô≠ G‚ô≠")

    def test_Ab_aolian(self):
        # misspelled mode "aeolian"
        scale = HeptatonicScale("Ab", "aolian")
        self.assertEqual(scale.name(), "A‚ô≠ unknown")
        self.assertEqual(scale.mode_name(), "unknown")
        self.assertEqual(scale.note_names(), "")

    def test_Fs_harmonic_minor(self):
        scale = HeptatonicScale("F#", "harmonic minor")
        self.assertEqual(scale.name(), "F‚ôØ harmonic minor")
        self.assertEqual(scale.mode_name(), "harmonic minor")
        self.assertEqual(scale.note_names(), "F‚ôØ G‚ôØ A B C‚ôØ D E‚ôØ")

    def test_Eb_locrian(self):
        scale = HeptatonicScale("Eb", "locrian")
        self.assertEqual(scale.name(), "E‚ô≠ locrian")
        self.assertEqual(scale.mode_name(), "locrian")
        self.assertEqual(scale.note_names(), "E‚ô≠ F‚ô≠ G‚ô≠ A‚ô≠ BùÑ´ C‚ô≠ D‚ô≠")

    def test_C_locrian(self):
        scale = HeptatonicScale("C", "locrian")
        self.assertEqual(scale.name(), "C locrian")
        self.assertEqual(scale.mode_name(), "locrian")
        self.assertEqual(scale.note_names(), "C D‚ô≠ E‚ô≠ F G‚ô≠ A‚ô≠ B‚ô≠")

    def test_C_major_locrian(self):
        scale = HeptatonicScale("C", "major locrian")
        self.assertEqual(scale.name(), "C major locrian")
        self.assertEqual(scale.mode_name(), "major locrian")
        self.assertEqual(scale.note_names(), "C D E F G‚ô≠ A‚ô≠ B‚ô≠")

    def test_C_altered(self):
        scale = HeptatonicScale("C", "altered")
        self.assertEqual(scale.name(), "C altered")
        self.assertEqual(scale.mode_name(), "altered")
        self.assertEqual(scale.note_names(), "C D‚ô≠ E‚ô≠ F‚ô≠ G‚ô≠ A‚ô≠ B‚ô≠")

    def test_C_phrygian(self):
        scale = HeptatonicScale("C", "phrygian")
        self.assertEqual(scale.name(), "C phrygian")
        self.assertEqual(scale.mode_name(), "phrygian")
        self.assertEqual(scale.note_names(), "C D‚ô≠ E‚ô≠ F G A‚ô≠ B‚ô≠")

    def test_E_phrygian(self):
        scale = HeptatonicScale("E", "phrygian")
        self.assertEqual(scale.name(), "E phrygian")
        self.assertEqual(scale.mode_name(), "phrygian")
        self.assertEqual(scale.note_names(), "E F G A B C D")

    def test_E_phrygian_dominant(self):
        scale = HeptatonicScale("E", "phrygian dominant")
        self.assertEqual(scale.name(), "E phrygian dominant")
        self.assertEqual(scale.mode_name(), "phrygian dominant")
        self.assertEqual(scale.note_names(), "E F G‚ôØ A B C D")

    def test_Gs_ionian(self):
        scale = HeptatonicScale("G#", "ionian")
        self.assertEqual(scale.name(), "G‚ôØ major")
        self.assertEqual(scale.mode_name(), "ionian")
        self.assertEqual(scale.note_names(), "G‚ôØ A‚ôØ B‚ôØ C‚ôØ D‚ôØ E‚ôØ FùÑ™")

    def test_Gs_dorian(self):
        scale = HeptatonicScale("G#", "dorian")
        self.assertEqual(scale.name(), "G‚ôØ dorian")
        self.assertEqual(scale.mode_name(), "dorian")
        self.assertEqual(scale.note_names(), "G‚ôØ A‚ôØ B C‚ôØ D‚ôØ E‚ôØ F‚ôØ")

    def test_Db_dorian(self):
        scale = HeptatonicScale("D‚ô≠", "dorian")
        self.assertEqual(scale.name(), "D‚ô≠ dorian")
        self.assertEqual(scale.mode_name(), "dorian")
        self.assertEqual(scale.note_names(), "D‚ô≠ E‚ô≠ F‚ô≠ G‚ô≠ A‚ô≠ B‚ô≠ C‚ô≠")

    def test_Bb_mixolydian(self):
        scale = HeptatonicScale("Bb", "mixolydian")
        self.assertEqual(scale.name(), "B‚ô≠ mixolydian")
        self.assertEqual(scale.mode_name(), "mixolydian")
        self.assertEqual(scale.note_names(), "B‚ô≠ C D E‚ô≠ F G A‚ô≠")

    def test_Bb_lydian(self):
        scale = HeptatonicScale("Bb", "lydian")
        self.assertEqual(scale.name(), "B‚ô≠ lydian")
        self.assertEqual(scale.mode_name(), "lydian")
        self.assertEqual(scale.note_names(), "B‚ô≠ C D E F G A")

    def test_Cs_lydian(self):
        scale = HeptatonicScale("C‚ôØ", "lydian")
        self.assertEqual(scale.name(), "C‚ôØ lydian")
        self.assertEqual(scale.mode_name(), "lydian")
        self.assertEqual(scale.note_names(), "C‚ôØ D‚ôØ E‚ôØ FùÑ™ G‚ôØ A‚ôØ B‚ôØ")

    def test_C_jazz_minor(self):
        scale = HeptatonicScale("C", "jazz minor")
        self.assertEqual(scale.name(), "C jazz minor")
        self.assertEqual(scale.mode_name(), "jazz minor")
        self.assertEqual(scale.note_names(), "C D E‚ô≠ F G A B")

    def test_C_hungarian_minor(self):
        scale = HeptatonicScale("C", "hungarian minor")
        self.assertEqual(scale.name(), "C hungarian minor")
        self.assertEqual(scale.mode_name(), "hungarian minor")
        self.assertEqual(scale.note_names(), "C D E‚ô≠ F‚ôØ G A‚ô≠ B")

    def test_C_hungarian_major(self):
        scale = HeptatonicScale("C", "hungarian major")
        self.assertEqual(scale.name(), "C hungarian major")
        self.assertEqual(scale.mode_name(), "hungarian major")
        self.assertEqual(scale.note_names(), "C D‚ôØ E F‚ôØ G A B‚ô≠")

    def test_B_ukranian_dorian(self):
        scale = HeptatonicScale("B", "ukranian dorian")
        self.assertEqual(scale.name(), "B ukranian dorian")
        self.assertEqual(scale.mode_name(), "ukranian dorian")
        self.assertEqual(scale.note_names(), "B C‚ôØ D E‚ôØ F‚ôØ G‚ôØ A")

    def test_C_double_harmonic(self):
        scale = HeptatonicScale("C", "double harmonic")
        self.assertEqual(scale.name(), "C double harmonic")
        self.assertEqual(scale.mode_name(), "double harmonic")
        self.assertEqual(scale.note_names(), "C D‚ô≠ E F G A‚ô≠ B")


class TestPentatonicScale(unittest.TestCase):
    def test_C_minor(self):
        scale = PentatonicScale("C", "minor")
        self.assertEqual(scale.name(), "C minor pentatonic")
        self.assertEqual(scale.mode_name(), "aeolian")
        self.assertEqual(scale.note_names(), "C E‚ô≠ F G B‚ô≠")

    def test_A_minor(self):
        scale = PentatonicScale("A", "minor")
        self.assertEqual(scale.name(), "A minor pentatonic")
        self.assertEqual(scale.mode_name(), "aeolian")
        self.assertEqual(scale.note_names(), "A C D E G")

    def test_B_natural_minor(self):
        scale = PentatonicScale("B", "minor")
        self.assertEqual(scale.name(), "B minor pentatonic")
        self.assertEqual(scale.mode_name(), "aeolian")
        self.assertEqual(scale.note_names(), "B D E F‚ôØ A")

    def test_E_minor(self):
        scale = PentatonicScale("E", "minor")
        self.assertEqual(scale.name(), "E minor pentatonic")
        self.assertEqual(scale.mode_name(), "aeolian")
        self.assertEqual(scale.note_names(), "E G A B D")

    def test_Ab_natural_minor(self):
        scale = PentatonicScale("Ab", "natural minor")
        self.assertEqual(scale.name(), "A‚ô≠ minor pentatonic")
        self.assertEqual(scale.mode_name(), "aeolian")
        self.assertEqual(scale.note_names(), "A‚ô≠ C‚ô≠ D‚ô≠ E‚ô≠ G‚ô≠")

    def test_C(self):
        scale = PentatonicScale("C")
        self.assertEqual(scale.name(), "C major pentatonic")
        self.assertEqual(scale.mode_name(), "ionian")
        self.assertEqual(scale.note_names(), "C D E G A")

    def test_C_major(self):
        scale = PentatonicScale("C", "major")
        self.assertEqual(scale.name(), "C major pentatonic")
        self.assertEqual(scale.mode_name(), "ionian")
        self.assertEqual(scale.note_names(), "C D E G A")

    def test_Cb_ionian(self):
        scale = PentatonicScale("Cb", "ionian")
        self.assertEqual(scale.name(), "C‚ô≠ major pentatonic")
        self.assertEqual(scale.mode_name(), "ionian")
        self.assertEqual(scale.note_names(), "C‚ô≠ D‚ô≠ E‚ô≠ G‚ô≠ A‚ô≠")

    def test_D_dorian(self):
        scale = PentatonicScale("D", "dorian")
        self.assertEqual(scale.name(), "D egyptian (suspended)")
        self.assertEqual(scale.mode_name(), "dorian")
        self.assertEqual(scale.note_names(), "D E G A C")

    def test_E_prygian(self):
        scale = PentatonicScale("E", "phrygian")
        self.assertEqual(scale.name(), "E blues minor")
        self.assertEqual(scale.mode_name(), "phrygian")
        self.assertEqual(scale.note_names(), "E G A C D")

    def test_As_mixolydian(self):
        scale = PentatonicScale("A#", "mixolydian")
        self.assertEqual(scale.name(), "A‚ôØ blues major")
        self.assertEqual(scale.mode_name(), "mixolydian")
        self.assertEqual(scale.note_names(), "A‚ôØ B‚ôØ D‚ôØ E‚ôØ FùÑ™")

    def test_Fs_aeolian(self):
        scale = PentatonicScale("F#", "aeolian")
        self.assertEqual(scale.name(), "F‚ôØ minor pentatonic")
        self.assertEqual(scale.mode_name(), "aeolian")
        self.assertEqual(scale.note_names(), "F‚ôØ A B C‚ôØ E")


class TestHexatonicScale(unittest.TestCase):
    def test_C_whole_tone(self):
        scale = HexatonicScale("C", "whole tone")
        self.assertEqual(scale.name(), "C whole tone")
        self.assertEqual(scale.mode_name(), "whole tone")
        self.assertEqual(scale.note_names(), "C D E F‚ôØ G‚ôØ A‚ôØ")

    def test_Db_whole_tone(self):
        scale = HexatonicScale("Db", "whole tone")
        self.assertEqual(scale.name(), "D‚ô≠ whole tone")
        self.assertEqual(scale.mode_name(), "whole tone")
        self.assertEqual(scale.note_names(), "D‚ô≠ E‚ô≠ F G A B")

    def test_C_major(self):
        scale = HexatonicScale("C", "major")
        self.assertEqual(scale.name(), "C major hexatonic")
        self.assertEqual(scale.mode_name(), "major")
        self.assertEqual(scale.note_names(), "C D E F G A")

    def test_C_minor(self):
        scale = HexatonicScale("C", "minor")
        self.assertEqual(scale.name(), "C minor hexatonic")
        self.assertEqual(scale.mode_name(), "minor")
        self.assertEqual(scale.note_names(), "C D E‚ô≠ F G B‚ô≠")

    def test_C_augmented(self):
        scale = HexatonicScale("C", "augmented")
        self.assertEqual(scale.name(), "C augmented")
        self.assertEqual(scale.mode_name(), "augmented")
        self.assertEqual(scale.note_names(), "C D‚ôØ E FùÑ™ G‚ôØ AùÑ™")    #  C E‚ô≠ E G G‚ôØ B

    def test_C_blues(self):
        scale = HexatonicScale("C", "blues")
        self.assertEqual(scale.name(), "C blues")
        self.assertEqual(scale.mode_name(), "blues")
        self.assertEqual(scale.note_names(), "C E‚ô≠ F G‚ô≠ G B‚ô≠")

    def test_Ds_blues(self):
        scale = HexatonicScale("D#", "blues")
        self.assertEqual(scale.name(), "D‚ôØ blues")
        self.assertEqual(scale.mode_name(), "blues")
        self.assertEqual(scale.note_names(), "D‚ôØ F‚ôØ G‚ôØ A A‚ôØ C‚ôØ")


if __name__ == "__main__":
    unittest.main()